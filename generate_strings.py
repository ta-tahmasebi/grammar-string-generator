from collections import deque

from colorama import Fore, Style


class GrammarGenerator:
    @staticmethod
    def generate_strings(grammar, start='S', max_steps=10000, debug=False):
        """
        Generates strings from a given grammar using a breadth-first-search approach.

        Parameters:
            grammar (list of tuples): A list of production rules (lhs, rhs), where lhs is replaced by rhs.
            start (str): The starting symbol for the grammar.
            max_steps (int): Maximum number of steps to prevent infinite loops.
            debug (bool): Print debug information!

        Yields:
            str: The processed terminal string (or None in debug mode).
        """

        for rule in grammar:
            if len(rule) != 2:
                raise ValueError(f"Invalid rule {rule}: must be a tuple of two elements")
            lhs, rhs = rule
            if not isinstance(lhs, str) or not isinstance(rhs, str):
                raise TypeError(f"Invalid rule {rule}: lhs and rhs must be strings")
            if len(lhs) == 0:
                raise ValueError(f"Invalid rule {rule}: lhs cannot be empty")

        non_terminals = set()
        for lhs, rhs in grammar:
            non_terminals.update(c for c in lhs if c.isupper())
            non_terminals.update(c for c in rhs if c.isupper())

        if not start.isupper():
            raise ValueError(f"Start symbol {start} must be uppercase")
        if start not in non_terminals:
            raise ValueError(f"Start symbol {start} not found in grammar non-terminals")

        visited = set()
        queue = deque([start])
        visited.add(start)
        step_count = 0

        try:
            while queue and step_count < max_steps:
                current = queue.popleft()
                step_count += 1

                is_terminal = not any(c in non_terminals for c in current)
                if is_terminal and not debug:
                    yield current
                else:
                    for lhs, rhs in grammar:
                        start_idx = 0
                        while True:
                            idx = current.find(lhs, start_idx)
                            if idx == -1:
                                break
                            new_str = current[:idx] + rhs + current[idx + len(lhs):]
                            if debug:
                                GrammarGenerator.__print_debug(current, new_str, visited,
                                                               not any(c in non_terminals for c in new_str))
                            if new_str not in visited:
                                visited.add(new_str)
                                queue.append(new_str)
                            start_idx = idx + 1

        except Exception as exception:
            raise Exception(f"Error during processing: {exception}")

    @staticmethod
    def print_strings(grammar, start='S', max_steps=10000, debug=False):
        """
        Prints terminal strings generated by the given grammar.

        Parameters:
            grammar (list of tuples): A list of production rules.
            start (str): The starting symbol.
            max_steps (int): Maximum number of steps for the generation.
            debug (bool): Print debug information!
        """
        try:
            generator = GrammarGenerator.generate_strings(grammar, start, max_steps, debug)
            for result in generator:
                GrammarGenerator.__print_colored("Found terminal string:", Fore.WHITE, " ")
                GrammarGenerator.__print_colored(f'"{result}"', Fore.BLUE)
        except Exception as e:
            GrammarGenerator.__print_colored("Fatal error:", Fore.RED, " ")
            GrammarGenerator.__print_colored(f'"{e}"', Fore.YELLOW)

    @staticmethod
    def __example1():
        """ Example grammar for (a^n)(b^n) """
        GrammarGenerator.__print_colored("=====================================================", Fore.YELLOW)
        GrammarGenerator.__print_colored("********************* EXAMPLE 1 *********************", Fore.YELLOW)
        GrammarGenerator.__print_colored("(a^n)(b^n) : ", color=Fore.GREEN)
        grammar = [
            ('S', 'aSb'),
            ('S', ''),
        ]
        GrammarGenerator.print_strings(grammar, max_steps=90)
        GrammarGenerator.__print_colored("", Fore.RESET)
        GrammarGenerator.__print_colored("", Fore.RESET)

    @staticmethod
    def __example2():
        """ Example grammar for (a^n)(b^n)(c^n) """
        GrammarGenerator.__print_colored("=====================================================", Fore.YELLOW)
        GrammarGenerator.__print_colored("********************* EXAMPLE 2 *********************", Fore.YELLOW)
        GrammarGenerator.__print_colored("(a^n)(b^n)(c^n) : ", color=Fore.GREEN)
        grammar = [
            ('S', ''),
            ('S', 'A'),
            ('A', 'aABC'),
            ('A', 'abC'),
            ('CB', 'BC'),
            ('bB', 'bb'),
            ('bC', 'bc'),
            ('cC', 'cc'),
        ]
        GrammarGenerator.print_strings(grammar, max_steps=100000)
        GrammarGenerator.__print_colored("", Fore.RESET)
        GrammarGenerator.__print_colored("", Fore.RESET)

    @staticmethod
    def __example3():
        """ Example grammar for a*b(b + ab*a) """
        GrammarGenerator.__print_colored("=====================================================", Fore.YELLOW)
        GrammarGenerator.__print_colored("********************* EXAMPLE 3 *********************", Fore.YELLOW)
        GrammarGenerator.__print_colored("******************** DEBUG MODE! ********************", Fore.YELLOW)
        GrammarGenerator.__print_colored("a*b(b + ab*a) : ", color=Fore.GREEN)

        grammar = [
            ('A', 'aA'),
            ('A', 'bB'),
            ('B', 'aC'),
            ('B', 'b'),
            ('C', 'bC'),
            ('C', 'a'),
        ]
        GrammarGenerator.print_strings(grammar, start='A', max_steps=100, debug=True)
        GrammarGenerator.__print_colored("", Fore.RESET)
        GrammarGenerator.__print_colored("", Fore.RESET)

    @staticmethod
    def run_examples():
        """Runs examples."""
        examples = [
            ("(a^n)(b^n)", GrammarGenerator.__example1),
            ("(a^n)(b^n)(c^n)", GrammarGenerator.__example2),
            ("a*b(b + ab*a)", GrammarGenerator.__example3),
        ]

        for _, example_function in examples:
            example_function()

    @staticmethod
    def __print_debug(current, new_str, visited, is_terminal):
        """
        Prints debugging information for string transformations.

        Args:
            current (str): The current string being processed.
            new_str (str): The next string generated in the transformation.
            visited (set): A set of strings already processed to check for duplicates.
            is_terminal (bool): Whether the current string is terminal.
        """
        GrammarGenerator.__print_colored("current string:", Fore.WHITE, " ")
        GrammarGenerator.__print_colored(current, Fore.CYAN, " ")
        GrammarGenerator.__print_colored("-->", Fore.RED, " ")
        GrammarGenerator.__print_colored("next string:", Fore.WHITE, " ")
        GrammarGenerator.__print_colored(new_str, Fore.CYAN, " ")
        if new_str not in visited:
            GrammarGenerator.__print_colored("(NEW)", Fore.BLUE, " ")
        else:
            GrammarGenerator.__print_colored("(observed previously)", Fore.RED, " ")
        if is_terminal:
            GrammarGenerator.__print_colored("(ACCEPTED)", Fore.GREEN, " ")

        GrammarGenerator.__print_colored("", end="\n")

    @staticmethod
    def __print_colored(text, color=Fore.RESET, end='\n'):
        """
        Prints text in the specified color and resets the style after printing.

        Args:
            text (str): The text to be printed.
            color (str, optional): The color to use for the text. Default is green.
            end (str, optional): The character(s) to append after the text. Default is '\n'.

        Prints colored text and resets the style."""

        print(color + text + Style.RESET_ALL, end=end)


if __name__ == "__main__":
    GrammarGenerator.run_examples()
